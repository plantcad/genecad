import logging
import os
import re
import subprocess
import pandas as pd

# Set up logging
logger = logging.getLogger(__name__)


def run_gffcompare(
    reference_path: str, input_path: str, output_dir: str, gffcompare_path: str
) -> str:
    """Run gffcompare command to compare input GFF against reference.

    Parameters
    ----------
    reference_path : str
        Path to reference GFF file
    input_path : str
        Path to input/query GFF file
    output_dir : str
        Directory to store comparison results
    gffcompare_path : str
        Path to gffcompare executable

    Returns
    -------
    str
        Output prefix (path without extension) used for gffcompare output files
    """
    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)

    # Set up the output prefix for gffcompare
    output_prefix = os.path.join(output_dir, "gffcompare")

    # Build the gffcompare command
    cmd = [gffcompare_path, "-r", reference_path, "-C", "-o", output_prefix, input_path]

    # Log the command being executed
    logger.info(f"Running: {' '.join(cmd)}")

    # Run the command
    try:
        result = subprocess.run(cmd, check=True, text=True, capture_output=True)
        logger.info(f"gffcompare stdout: {result.stdout}")

        if result.stderr:
            logger.warning(f"gffcompare stderr: {result.stderr}")

        return output_prefix
    except subprocess.CalledProcessError as e:
        logger.error(f"gffcompare failed: {e}")
        logger.error(f"stdout: {e.stdout}")
        logger.error(f"stderr: {e.stderr}")
        raise RuntimeError(f"gffcompare command failed with exit code {e.returncode}")


def parse_gffcompare_stats(stats_file: str) -> pd.DataFrame:
    """Parse gffcompare stats file into a pandas DataFrame with sensitivity and precision metrics.

    Parameters
    ----------
    stats_file : str
        Path to the .stats file generated by gffcompare

    Returns
    -------
    pd.DataFrame
        DataFrame containing parsed sensitivity and precision stats by level
    """
    logger.info(f"Parsing gffcompare stats file: {stats_file}")

    # Data container for statistics
    stats_data = {"level": [], "sensitivity": [], "precision": []}

    try:
        with open(stats_file, "r") as f:
            lines = f.readlines()

        # Find and parse the sensitivity/precision table
        table_start = False
        for line in lines:
            # Check for table header
            if "-------|" in line and "Sensitivity" in line and "Precision" in line:
                table_start = True
                continue

            # Process table rows
            if table_start and "level:" in line and "|" in line:
                # Extract level name
                level_part = line.split("level:")[0].strip()

                # Extract sensitivity and precision using regex to find numeric values
                values = re.findall(r"(\d+\.\d+)", line)
                if len(values) == 2:
                    sensitivity = float(values[0])
                    precision = float(values[1])

                    stats_data["level"].append(level_part)
                    stats_data["sensitivity"].append(sensitivity)
                    stats_data["precision"].append(precision)
                else:
                    raise ValueError(
                        f"Expected exactly 2 numeric values for sensitivity and precision, but found {len(values)} in line: {line.strip()}"
                    )

            # Check for end of table
            elif table_start and not ("|" in line and ":" in line):
                # If we've started the table and now hit a line without pipe and colon, table is done
                if stats_data["level"]:  # Only break if we've collected data
                    break

        # Create DataFrame from collected data
        stats_df = pd.DataFrame(stats_data)
        return stats_df

    except Exception as e:
        logger.error(f"Error parsing gffcompare stats file: {e}")
        raise
