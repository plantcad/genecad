# Directory variables
RAW_DIR ?= $(WORK)/data/dna/plant_caduceus_genome_annotation_task/data_share_20250326/testing_data
PIPE_DIR ?= $(SCRATCH)/data/dna/plant_caduceus_genome_annotation_task/pipeline
MODEL_PATH ?= kuleshov-group/compo-cad2-l24-dna-chtk-c8192-v2-b2-NpnkD-ba240000
DURATION_PROBS_PATH ?= local/data/feature_length_distributions.parquet
RUN_VERSION ?= v0.0
DECODING_METHOD ?= viterbi
SM_VITERBI_NUM_WORKERS ?= 64
REMOVE_INCOMPLETE_FEATURES ?= yes
MODEL_CHECKPOINT ?= 

# Define SPECIES and their chromosome IDs
SPECIES = zmays carabica jregia pvulgaris ntabacum nsylvestris
CHR_ID = chr1

# Define run-specific directory for model outputs
RUN_DIR = runs/$(RUN_VERSION)

# Define commonly used paths
PREDICT_DIR ?= $(PIPE_DIR)/predict
SPECIES_DIR ?= $(PREDICT_DIR)/$*/$(RUN_DIR)/$(CHR_ID)
SPECIES_PREDICTIONS_DIR ?= $(SPECIES_DIR)/predictions

# Simple function to capitalize first letter
capitalize = $(shell echo $1 | sed 's/./\u&/')

# Define all target to run the complete pipeline for all species
.PHONY: all clean help $(SPECIES) extract-sequences predict process-results

all: $(SPECIES)

# Help target
help:
	@echo "Available targets:"
	@echo "  extract-sequences-SPECIES - Extract sequences for a specific species"
	@echo "  predict-SPECIES - Run predictions for a specific species"
	@echo "  process-results-SPECIES - Process prediction results"
	@echo "  SPECIES - Run complete pipeline for a specific species (zmays, carabica, jregia, pvulgaris, ntabacum, nsylvestris)"
	@echo "  all - Run complete pipeline for all species"
	@echo "  clean - Remove all generated files"

# Species-specific targets
$(SPECIES): %: process-results-%

# Define sequence file target containing DNA tokens
$(PREDICT_DIR)/%/sequences.zarr:
	python scripts/extract.py extract_fasta_sequences \
	  --input-dir $(RAW_DIR)/fasta \
	  --species-id $(call capitalize,$*) \
	  --tokenizer-path $(MODEL_PATH) \
	  --output $(PREDICT_DIR)/$*/sequences.zarr

# Extract sequences for each species (now using file target)
extract-sequences-%: $(PREDICT_DIR)/%/sequences.zarr

# Generate predictions for each species
predict-%: $(PREDICT_DIR)/%/sequences.zarr
	srun bin/tacc \
	python scripts/predict.py create_predictions \
	  --input $(PREDICT_DIR)/$*/sequences.zarr \
	  --output-dir $(SPECIES_PREDICTIONS_DIR) \
	  --model-path $(MODEL_PATH) \
	  --model-checkpoint $(MODEL_CHECKPOINT) \
	  --species-id $(call capitalize,$*) \
	  --chromosome-id $(CHR_ID) \
	  --batch-size 32

# Process results (detect intervals, export GFF, filter, compare, etc.)
process-results-%: predict-%
	# ------------------------------------------------------------
	# Detect intervals and export GFF
	# ------------------------------------------------------------
	python scripts/predict.py detect_intervals \
	  --input-dir $(SPECIES_PREDICTIONS_DIR) \
	  --output $(SPECIES_DIR)/intervals.zarr \
	  --decoding-methods "direct,$(DECODING_METHOD)" \
	  --remove-incomplete-features $(REMOVE_INCOMPLETE_FEATURES) \
	  --duration-probs-path $(DURATION_PROBS_PATH) \
	  --num-workers $(SM_VITERBI_NUM_WORKERS)
	python scripts/predict.py export_gff \
	  --input $(SPECIES_DIR)/intervals.zarr \
	  --output $(SPECIES_DIR)/gff/predictions.gff \
	  --decoding-method $(DECODING_METHOD) \
	  --min-transcript-length 3 \
	  --strip-introns yes
	# ------------------------------------------------------------
	# Process predictions
	# ------------------------------------------------------------
	python scripts/gff.py filter_to_strand \
	  --input $(SPECIES_DIR)/gff/predictions.gff \
	  --output $(SPECIES_DIR)/gff/predictions__strand_both.gff \
	  --strand both
	python scripts/gff.py filter_to_min_feature_length \
	  --input $(SPECIES_DIR)/gff/predictions__strand_both.gff \
	  --output $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2.gff \
	  --feature-types "five_prime_UTR,three_prime_UTR,CDS" \
	  --min-length 2
	python scripts/gff.py filter_to_min_gene_length \
	  --input $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2.gff \
	  --output $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30.gff \
	  --min-length 30
	python scripts/gff.py filter_to_valid_genes \
	  --input $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30.gff \
	  --output $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30__has_cds.gff \
	  --require-utrs no
	python scripts/gff.py filter_to_valid_genes \
	  --input $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30.gff \
	  --output $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30__has_all_feats.gff \
	  --require-utrs yes
	python scripts/gff.py remove_exon_utrs \
	  --input $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30__has_cds.gff \
	  --output $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30__has_cds__no_utrs.gff
	python scripts/gff.py remove_exon_utrs \
	  --input $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30__has_all_feats.gff \
	  --output $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30__has_all_feats__no_utrs.gff
	# ------------------------------------------------------------
	# Process labels
	# ------------------------------------------------------------
	python scripts/gff.py resolve \
	  --input-dir $(RAW_DIR)/gff \
	  --species-id $(call capitalize,$*) \
	  --output $(SPECIES_DIR)/gff/labels_raw.gff
	python scripts/gff.py filter_to_chromosome \
	  --input $(SPECIES_DIR)/gff/labels_raw.gff \
	  --output $(SPECIES_DIR)/gff/labels.gff \
	  --chromosome-id $(CHR_ID) \
	  --species-id $(call capitalize,$*)
	python scripts/gff.py remove_exon_utrs \
	  --input $(SPECIES_DIR)/gff/labels.gff \
	  --output $(SPECIES_DIR)/gff/labels__no_utrs.gff
	# ------------------------------------------------------------
	# Run comparisons (gffcompare)
	# ------------------------------------------------------------
	python scripts/gff.py compare \
	  --reference $(SPECIES_DIR)/gff/labels.gff \
	  --input $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30__has_all_feats.gff \
	  --output $(SPECIES_DIR)/results/valid_only__with_utrs \
	  --gffcompare-path $(WORK)/repos/misc/gffcompare/gffcompare
	python scripts/gff.py compare \
	  --reference $(SPECIES_DIR)/gff/labels__no_utrs.gff \
	  --input $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30__has_all_feats__no_utrs.gff \
	  --output $(SPECIES_DIR)/results/valid_only__no_utrs \
	  --gffcompare-path $(WORK)/repos/misc/gffcompare/gffcompare
	python scripts/gff.py compare \
	  --reference $(SPECIES_DIR)/gff/labels.gff \
	  --input $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30__has_cds.gff \
	  --output $(SPECIES_DIR)/results/minlen_only__with_utrs \
	  --gffcompare-path $(WORK)/repos/misc/gffcompare/gffcompare
	python scripts/gff.py compare \
	  --reference $(SPECIES_DIR)/gff/labels__no_utrs.gff \
	  --input $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30__has_cds__no_utrs.gff \
	  --output $(SPECIES_DIR)/results/minlen_only__no_utrs \
	  --gffcompare-path $(WORK)/repos/misc/gffcompare/gffcompare
	# ------------------------------------------------------------
	# Run comparisons (gffeval)
	# ------------------------------------------------------------
	python scripts/gff.py clean \
	  --input $(SPECIES_DIR)/gff/labels.gff \
	  --output /tmp/labels_cleaned.gff
	python scripts/gff.py clean \
	  --input $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30__has_cds.gff \
	  --output /tmp/predictions__minlen_only__with_utrs.gff
	python scripts/gff.py clean \
	  --input $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30__has_all_feats.gff \
	  --output /tmp/predictions__valid_only__with_utrs.gff
	python scripts/gff.py evaluate \
	  --reference /tmp/labels_cleaned.gff \
	  --input /tmp/predictions__minlen_only__with_utrs.gff \
	  --output $(SPECIES_DIR)/results/minlen_only__with_utrs \
	  --edge-tolerance 0
	python scripts/gff.py evaluate \
	  --reference /tmp/labels_cleaned.gff \
	  --input /tmp/predictions__valid_only__with_utrs.gff \
	  --output $(SPECIES_DIR)/results/valid_only__with_utrs \
	  --edge-tolerance 0
	# ------------------------------------------------------------
	# Consolidate results
	# ------------------------------------------------------------
	python scripts/gff.py collect_results \
	  --input $(SPECIES_DIR)/results \
	  --output $(SPECIES_DIR)/results/gffcompare.stats.consolidated.csv
	# ------------------------------------------------------------
	# Merge labels and predictions
	# ------------------------------------------------------------
	python scripts/gff.py set_source --source labels \
	  --input $(SPECIES_DIR)/gff/labels.gff \
	  --output /tmp/labels.gff
	python scripts/gff.py set_source --source predictions \
	  --input $(SPECIES_DIR)/gff/predictions__strand_both__feat_len_2__gene_len_30__has_cds.gff \
	  --output /tmp/predictions.gff
	python scripts/gff.py merge \
	  --input /tmp/labels.gff /tmp/predictions.gff \
	  --output $(SPECIES_DIR)/gff/labeled_predictions__strand_both.gff

# Clean target
clean:
	rm -rf $(addprefix $(PREDICT_DIR)/,$(addsuffix /$(RUN_DIR),$(SPECIES)))